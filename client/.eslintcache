[{"/Users/user/Documents/Projects/quiz_app/client/src/index.js":"1","/Users/user/Documents/Projects/quiz_app/client/src/App.js":"2","/Users/user/Documents/Projects/quiz_app/client/src/components/GameCenter.js":"3","/Users/user/Documents/Projects/quiz_app/client/src/components/LandingPage.js":"4"},{"size":197,"mtime":1608224957546,"results":"5","hashOfConfig":"6"},{"size":402,"mtime":1608295662208,"results":"7","hashOfConfig":"6"},{"size":6619,"mtime":1608307130166,"results":"8","hashOfConfig":"6"},{"size":1372,"mtime":1608305472906,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"v5w4qg",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"12"},"/Users/user/Documents/Projects/quiz_app/client/src/index.js",[],["22","23"],"/Users/user/Documents/Projects/quiz_app/client/src/App.js",["24"],"import \"./App.css\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport GameCenter from \"./components/GameCenter\";\nimport LandingPage from \"./components/LandingPage\";\n\nconst App = () => {\n  return (\n    <Router>\n      <Route exact path=\"/\" component={LandingPage} />\n      <Route exact path=\"/quiz/:user\" component={GameCenter} />\n    </Router>\n  );\n};\n\nexport default App;\n","/Users/user/Documents/Projects/quiz_app/client/src/components/GameCenter.js",["25","26"],"import React, {useState, Fragment, useEffect} from \"react\";\nimport \"./GameCenter.css\";\nimport maxi from \"./../resources/maxiBild.jpg\";\nimport siggi from \"./../resources/siggiBild.jpg\";\nimport io from \"socket.io-client\";\n// connecting to the socket server\nconst socket = io.connect(\"http://127.0.0.1:4001\");\n\nconst GameCenter = props => {\n  const user = props.match.params.user;\n  // const [response, setResponse] = useState(\"\");\n  // connecting to the socket server\n  useEffect(() => {\n    socket.on(\"buzzerClicked\", ({player}) => {\n      setBuzzerStatus(true);\n      setBuzzerClicker(player);\n    });\n    socket.on(\"buzzerReset\", () => {\n      setBuzzerStatus(false);\n    });\n    socket.on(\"setStakes\", newStakes => {\n      setCurrentStakes(newStakes);\n    });\n    socket.on(\"setPoints\", newPoints => {\n      setCurrentPoints(newPoints);\n    });\n    socket.on(\"setAnsweredQuestions\", newAnsweredQuestions => {\n      setAnsweredQuestions(newAnsweredQuestions);\n    });\n  }, []);\n\n  // state initialization\n  let [currentStakes, setCurrentStakes] = useState({\n    firstPlayer: 0,\n    secondPlayer: 0\n  });\n  let [currentPoints, setCurrentPoints] = useState({\n    firstPlayer: 100,\n    secondPlayer: 100\n  });\n  let [answeredQuestions, setAnsweredQuestions] = useState({\n    firstPlayer: 0,\n    secondPlayer: 0\n  });\n\n  let [whoClicked, setBuzzerClicker] = useState(\"\");\n  let [buzzerBlocked, setBuzzerStatus] = useState(false);\n\n  const handleBuzzerClick = () => {\n    setBuzzerStatus(true);\n    setBuzzerClicker(user.split(\"_\").join(\" \"));\n    socket.emit(\"buzzerClicked\", {player: user.split(\"_\").join(\" \")});\n  };\n\n  const handleCorrectAnswer = player => {\n    let newPoints = {\n      ...currentPoints,\n      [player]:\n        parseInt(currentPoints[player]) + parseInt(currentStakes[player])\n    };\n    let newAnsweredQuestions = {\n      ...answeredQuestions,\n      [player]: answeredQuestions[player] + 1\n    };\n    setCurrentPoints();\n    socket.emit(\"setPoints\", newPoints);\n    setAnsweredQuestions(newAnsweredQuestions);\n    socket.emit(\"setAnsweredQuestions\", newAnsweredQuestions);\n    socket.emit(\"buzzerReset\");\n  };\n\n  const handleWrongAnswer = player => {\n    let newPoints = {\n      ...currentPoints,\n      [player]:\n        parseInt(currentPoints[player]) - parseInt(currentStakes[player])\n    };\n    setCurrentPoints(newPoints);\n    let newAnsweredQuestions = {\n      ...answeredQuestions,\n      [player]: answeredQuestions[player] + 1\n    };\n    setAnsweredQuestions(newAnsweredQuestions);\n    socket.emit(\"setPoints\", newPoints);\n    socket.emit(\"setAnsweredQuestions\", newAnsweredQuestions);\n    socket.emit(\"buzzerReset\");\n  };\n\n  const handleBuzzerReset = () => {\n    socket.emit(\"buzzerReset\");\n  };\n\n  const updateStakes = (value, player) => {\n    setCurrentStakes({\n      ...currentStakes,\n      [player]: value\n    });\n    socket.emit(\"setStakes\", {...currentStakes, [player]: value});\n  };\n\n  return (\n    <Fragment>\n      {buzzerBlocked ? (\n        <div className=\"buzzerBlockedScreen\">\n          <div className=\"whoBuzzered\">\n            <span className=\"firstClicker\">{whoClicked}</span>\n            hat zuerst gedrückt!\n          </div>\n        </div>\n      ) : null}\n      <div className=\"gameCenter\">\n        <div className=\"scoreBoard\">\n          <div className=\"playerContainer\">\n            <h2 className=\"playerName\">Kleines Gehirn</h2>\n            <img className=\"playerPicture\" src={siggi} />\n            <h4 className=\"stakes\">\n              Aktueller Einsatz: {currentStakes.firstPlayer}\n            </h4>\n          </div>\n          <div className=\"scoreContainer\">\n            <h2 className=\"playerName\">Punktestand</h2>\n            <div className=\"pointsContainer\">\n              <h2>{currentPoints ? currentPoints.firstPlayer : null}</h2>\n              <div className=\"pointsDivider\"></div>\n              <h2>{currentPoints ? currentPoints.secondPlayer : null}</h2>\n            </div>\n          </div>\n          <div className=\"playerContainer\">\n            <h2 className=\"playerName\">Ober Alman</h2>\n            <img className=\"playerPicture\" src={maxi} />\n            <h4 className=\"stakes\">\n              Aktueller Einsatz: {currentStakes.secondPlayer}\n            </h4>\n          </div>\n        </div>\n        <div className=\"metrics\">\n          <div className=\"changeStakes\">\n            <h3 className=\"changeStakesText\">Beantwortete Fragen:</h3>\n            <h3 className=\"numberOfQuestions\">\n              {answeredQuestions.firstPlayer}\n            </h3>\n            <h3 className=\"changeStakesText\">Einsatz ändern</h3>\n            <input\n              type=\"text\"\n              onChange={e => updateStakes(e.target.value, \"firstPlayer\")}\n              value={currentStakes.firstPlayer}\n              placeholder={0}\n            ></input>\n          </div>\n          <div\n            className=\"buzzer\"\n            onClick={e => handleBuzzerClick(\"Kleines Gehirn\")}\n          >\n            BUZZER\n          </div>\n          <div className=\"changeStakes\">\n            <h3 className=\"changeStakesText\">Beantwortete Fragen:</h3>\n            <h3 className=\"numberOfQuestions\">\n              {answeredQuestions.secondPlayer}\n            </h3>\n            <h3 className=\"changeStakesText\">Einsatz ändern</h3>\n            <input\n              type=\"text\"\n              onChange={e => updateStakes(e.target.value, \"secondPlayer\")}\n              value={currentStakes.secondPlayer}\n              placeholder={0}\n            ></input>\n          </div>\n        </div>\n      </div>\n      {user === \"host\" ? (\n        <div className=\"adminPanel\">\n          <div className=\"firstPlayerPanel\">\n            <div\n              className=\"button correct\"\n              onClick={() => handleCorrectAnswer(\"firstPlayer\")}\n            >\n              RICHTIG\n            </div>\n            <div\n              className=\"button false\"\n              onClick={() => handleWrongAnswer(\"firstPlayer\")}\n            >\n              FALSCH\n            </div>\n          </div>\n          <div className=\"button\" onClick={() => handleBuzzerReset()}>\n            Buzzer freischalten\n          </div>\n          <div className=\"secondPlayerPanel\">\n            <div\n              className=\"button correct\"\n              onClick={() => handleCorrectAnswer(\"secondPlayer\")}\n            >\n              RICHTIG\n            </div>\n            <div\n              className=\"button false\"\n              onClick={() => handleWrongAnswer(\"secondPlayer\")}\n            >\n              FALSCH\n            </div>\n          </div>\n        </div>\n      ) : null}\n    </Fragment>\n  );\n};\n\nexport default GameCenter;\n","/Users/user/Documents/Projects/quiz_app/client/src/components/LandingPage.js",["27","28","29","30","31","32"],"import React, {useState, Fragment, useEffect} from \"react\";\nimport \"./LandingPage.css\";\nimport maxi from \"./../resources/maxiBild.jpg\";\nimport siggi from \"./../resources/siggiBild.jpg\";\nimport nikki from \"./../resources/nikkibild.jpeg\";\n\nconst LandingPage = props => {\n  let [whoClicked, setBuzzerClicker] = useState(\"Marcel\");\n\n  console.log(props.history);\n  const handleChoice = choice => {\n    props.history.push(choice);\n  };\n\n  return (\n    <Fragment>\n      <div className=\"gameCenter\">\n        <ul className=\"selectPlayer\">\n          <li\n            className=\"selectOption\"\n            onClick={e => handleChoice(\"/quiz/ober_alman\")}\n          >\n            <img src={maxi} className=\"selectPicture\" />\n            <h2 className=\"playerName\">OBER ALMAN</h2>\n          </li>\n          <li\n            className=\"selectOption\"\n            onClick={e => handleChoice(\"/quiz/kleines_gehirn\")}\n          >\n            <img src={siggi} className=\"selectPicture\" />\n            <h2 className=\"playerName\">KLEINES GEHIRN</h2>\n          </li>\n          <li\n            className=\"selectOption\"\n            onClick={e => handleChoice(\"/quiz/host\")}\n          >\n            <img src={nikki} className=\"selectPicture\" />\n            <h2 className=\"playerName\">Questionmaster</h2>\n          </li>\n        </ul>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default LandingPage;\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":2,"column":41,"nodeType":"39","messageId":"40","endLine":2,"endColumn":47},{"ruleId":"41","severity":1,"message":"42","line":115,"column":13,"nodeType":"43","endLine":115,"endColumn":58},{"ruleId":"41","severity":1,"message":"42","line":130,"column":13,"nodeType":"43","endLine":130,"endColumn":57},{"ruleId":"37","severity":1,"message":"44","line":1,"column":36,"nodeType":"39","messageId":"40","endLine":1,"endColumn":45},{"ruleId":"37","severity":1,"message":"45","line":8,"column":8,"nodeType":"39","messageId":"40","endLine":8,"endColumn":18},{"ruleId":"37","severity":1,"message":"46","line":8,"column":20,"nodeType":"39","messageId":"40","endLine":8,"endColumn":36},{"ruleId":"41","severity":1,"message":"42","line":23,"column":13,"nodeType":"43","endLine":23,"endColumn":57},{"ruleId":"41","severity":1,"message":"42","line":30,"column":13,"nodeType":"43","endLine":30,"endColumn":58},{"ruleId":"41","severity":1,"message":"42","line":37,"column":13,"nodeType":"43","endLine":37,"endColumn":58},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'whoClicked' is assigned a value but never used.","'setBuzzerClicker' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]